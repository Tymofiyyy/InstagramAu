import os
import json
from pathlib import Path

class Config:
    """–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–æ—Ç–∞"""
    
    # –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    HEADLESS = False  # –ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º—ñ
    TIMEOUT = 10  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π
    
    # –ó–∞—Ç—Ä–∏–º–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    MIN_DELAY = 1
    MAX_DELAY = 3
    HUMAN_DELAY_MIN = 0.1
    HUMAN_DELAY_MAX = 0.3
    
    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–π
    MAX_LIKES_PER_SESSION = 50
    MAX_COMMENTS_PER_SESSION = 10
    MAX_FOLLOWS_PER_SESSION = 20
    
    # –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
    BASE_DIR = Path(__file__).parent
    LOGS_DIR = BASE_DIR / "logs"
    SESSIONS_DIR = BASE_DIR / "sessions"
    TEMP_DIR = BASE_DIR / "temp"
    DATA_DIR = BASE_DIR / "data"
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
    for directory in [LOGS_DIR, SESSIONS_DIR, TEMP_DIR, DATA_DIR]:
        directory.mkdir(exist_ok=True)
    
    # User Agents –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
    USER_AGENTS = [
        "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1",
        "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1",
        "Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1",
        "Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36",
        "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Mobile Safari/537.36",
        "Mozilla/5.0 (Linux; Android 10; SM-N975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.210 Mobile Safari/537.36"
    ]
    
    # –ü—Ä–æ–∫—Å—ñ —Å–µ—Ä–≤–µ—Ä–≤
    PROXY_SERVERS = [
        # –î–æ–¥–∞–π—Ç–µ –≤–∞—à—ñ –ø—Ä–æ–∫—Å—ñ —Å–µ—Ä–≤–µ—Ä–∏ —Ç—É—Ç
        # –§–æ—Ä–º–∞—Ç: "ip:port:username:password"
        # –ü—Ä–∏–∫–ª–∞–¥: "192.168.1.1:8080:user:pass"
    ]
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–ø—á—ñ
    CAPTCHA_SOLVER = {
        "service": "2captcha",  # 2captcha, anticaptcha, deathbycaptcha
        "api_key": "",  # –í–∞—à API –∫–ª—é—á
        "timeout": 120
    }
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ö–æ–¥—É –¥–µ—Ç–µ–∫—Ü—ñ—ó
    ANTI_DETECTION = {
        "mouse_movements": True,
        "random_scrolling": True,
        "typing_delays": True,
        "human_pauses": True,
        "viewport_changes": True
    }
    
    # –°–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è Instagram (–æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–ª—è 2025)
    SELECTORS = {
        "login": {
            "username": [
                "input[name='username']",
                "input[aria-label*='username']",
                "input[placeholder*='username']",
                "input[autocomplete='username']"
            ],
            "password": [
                "input[name='password']",
                "input[type='password']",
                "input[aria-label*='password']",
                "input[autocomplete='current-password']"
            ],
            "submit": [
                "button[type='submit']",
                "//button[contains(text(), 'Log in')]",
                "//button[contains(text(), 'Log In')]",
                "//button[contains(text(), '–£–≤—ñ–π—Ç–∏')]",
                "//div[@role='button' and contains(text(), 'Log')]",
                "//button[contains(@class, 'login') or contains(@class, 'Login')]"
            ]
        },
        "posts": {
            "container": [
                "article div div div div a",
                "div[role='button'] img[src*='instagram']",
                "article a[href*='/p/']",
                "div[style*='padding-bottom'] a"
            ],
            "like_button": [
                "svg[aria-label='Like']",
                "svg[aria-label='–ü–æ–¥–æ–±–∞—î—Ç—å—Å—è']",
                "button svg[aria-label*='Like']",
                "div[role='button'] svg[aria-label*='Like']"
            ],
            "unlike_button": [
                "svg[aria-label='Unlike']",
                "svg[aria-label='–ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è']",
                "button svg[aria-label*='Unlike']"
            ],
            "comment_button": [
                "svg[aria-label='Comment']",
                "svg[aria-label='–ö–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏']",
                "button svg[aria-label*='Comment']"
            ],
            "share_button": [
                "svg[aria-label='Share']",
                "svg[aria-label='–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è']",
                "button svg[aria-label*='Share']"
            ]
        },
        "stories": {
            "container": [
                "div[role='menu']",
                "div[style*='scroll'] div[role='button']",
                "section div[role='button']"
            ],
            "story_item": [
                "div[role='menu'] div div div",
                "div[style*='border-radius'] img",
                "canvas[style*='border-radius']"
            ],
            "username": [
                "span",
                "div span",
                "button span"
            ],
            "like_button": [
                "svg[aria-label='Like']",
                "svg[aria-label='–ü–æ–¥–æ–±–∞—î—Ç—å—Å—è']",
                "button[aria-label*='Like']"
            ],
            "reply_input": [
                "textarea[placeholder*='Send message']",
                "textarea[placeholder*='Reply']",
                "textarea[placeholder*='–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏']",
                "div[contenteditable='true']"
            ],
            "send_button": [
                "button[type='submit']",
                "//button[contains(text(), 'Send')]",
                "//div[@role='button' and contains(text(), 'Send')]"
            ]
        },
        "profile": {
            "followers": [
                "a[href*='/followers/'] span",
                "//a[contains(@href, 'followers')]//span"
            ],
            "following": [
                "a[href*='/following/'] span",
                "//a[contains(@href, 'following')]//span"
            ],
            "posts_count": [
                "span",
                "div span:first-child"
            ]
        },
        "dialogs": {
            "not_now": [
                "//button[contains(text(), 'Not Now')]",
                "//button[contains(text(), '–ù–µ –∑–∞—Ä–∞–∑')]",
                "//div[@role='button' and contains(text(), 'Not Now')]"
            ],
            "save_info": [
                "//button[contains(text(), 'Save Info')]",
                "//button[contains(text(), '–ó–±–µ—Ä–µ–≥—Ç–∏')]"
            ],
            "turn_on_notifications": [
                "//button[contains(text(), 'Turn on Notifications')]",
                "//button[contains(text(), '–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è')]"
            ],
            "close": [
                "svg[aria-label='Close']",
                "svg[aria-label='–ó–∞–∫—Ä–∏—Ç–∏']",
                "button[aria-label='Close']",
                "//button[@aria-label='Close']"
            ]
        },
        "captcha": [
            "div[role='dialog'] img",
            ".captcha-image",
            "img[alt*='captcha']",
            "img[src*='captcha']",
            "img[src*='challenge']"
        ]
    }
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ —Å—Ç–æ—Ä—ñ—Å
    DEFAULT_STORY_REPLIES = [
        "üòç",
        "üî•",
        "‚ù§Ô∏è",
        "Nice!",
        "Cool!",
        "Awesome!",
        "Great!",
        "Love it!",
        "Amazing!",
        "Perfect!"
    ]
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    DATABASE = {
        "type": "sqlite",
        "path": str(DATA_DIR / "instagram_bot.db"),
        "backup_frequency": 24  # –≥–æ–¥–∏–Ω
    }
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ–π
    SAVE_SESSIONS = False  # –ù–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å–µ—Å—ñ—ó –¥–ª—è –±–µ–∑–ø–µ–∫–∏
    ALWAYS_FRESH_LOGIN = True  # –ó–∞–≤–∂–¥–∏ –≤—Ö–æ–¥–∏—Ç–∏ –∑–∞–Ω–æ–≤–æ
    CLOSE_ALL_DIALOGS = True  # –ó–∞–∫—Ä–∏–≤–∞—Ç–∏ –≤—Å—ñ –¥—ñ–∞–ª–æ–≥–∏ –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
    DEBUG_MODE = True  # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    SCREENSHOTS_ON_ERROR = True  # –°–∫—Ä—ñ–Ω—à–æ—Ç–∏ –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö
    SLOW_MODE = True  # –ü–æ–≤—ñ–ª—å–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
    SECURITY = {
        "max_actions_per_hour": 30,
        "max_actions_per_day": 200,
        "cooldown_after_limit": 3600,  # —Å–µ–∫—É–Ω–¥
        "randomize_actions": True
    }
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    LOGGING = {
        "level": "INFO",
        "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        "file_rotation": True,
        "max_file_size": 10 * 1024 * 1024,  # 10MB
        "backup_count": 5
    }
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GUI
    GUI = {
        "theme": "dark",
        "window_size": "800x600",
        "resizable": True,
        "auto_save": True,
        "language": "uk"  # —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞
    }
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ—ó –µ–º—É–ª—è—Ü—ñ—ó
    MOBILE_DEVICES = {
        "iPhone_12": {
            "width": 390,
            "height": 844,
            "pixel_ratio": 3.0,
            "user_agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1"
        },
        "iPhone_13": {
            "width": 390,
            "height": 844,
            "pixel_ratio": 3.0,
            "user_agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1"
        },
        "Samsung_Galaxy_S21": {
            "width": 384,
            "height": 854,
            "pixel_ratio": 2.75,
            "user_agent": "Mozilla/5.0 (Linux; Android 11; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36"
        },
        "Google_Pixel_5": {
            "width": 393,
            "height": 851,
            "pixel_ratio": 2.75,
            "user_agent": "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Mobile Safari/537.36"
        }
    }
    
    @classmethod
    def load_config(cls, config_file=None):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É"""
        if config_file and os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    config_data = json.load(f)
                    
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
                for key, value in config_data.items():
                    if hasattr(cls, key):
                        setattr(cls, key, value)
                        
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
                
    @classmethod
    def save_config(cls, config_file=None):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤ —Ñ–∞–π–ª"""
        if not config_file:
            config_file = cls.DATA_DIR / "config.json"
            
        try:
            config_data = {
                "HEADLESS": cls.HEADLESS,
                "TIMEOUT": cls.TIMEOUT,
                "MIN_DELAY": cls.MIN_DELAY,
                "MAX_DELAY": cls.MAX_DELAY,
                "MAX_LIKES_PER_SESSION": cls.MAX_LIKES_PER_SESSION,
                "MAX_COMMENTS_PER_SESSION": cls.MAX_COMMENTS_PER_SESSION,
                "MAX_FOLLOWS_PER_SESSION": cls.MAX_FOLLOWS_PER_SESSION,
                "CAPTCHA_SOLVER": cls.CAPTCHA_SOLVER,
                "ANTI_DETECTION": cls.ANTI_DETECTION,
                "SECURITY": cls.SECURITY,
                "GUI": cls.GUI
            }
            
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            
    @classmethod
    def get_random_user_agent(cls):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ User Agent"""
        import random
        return random.choice(cls.USER_AGENTS)
        
    @classmethod
    def get_random_device(cls):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é"""
        import random
        device_name = random.choice(list(cls.MOBILE_DEVICES.keys()))
        return cls.MOBILE_DEVICES[device_name]
        
    @classmethod
    def get_proxy(cls):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ —Å–µ—Ä–≤–µ—Ä–∞"""
        import random
        if cls.PROXY_SERVERS:
            return random.choice(cls.PROXY_SERVERS)
        return None
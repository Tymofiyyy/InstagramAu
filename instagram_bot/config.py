import os
import json
from pathlib import Path

class Config:
    """–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–æ—Ç–∞ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –±–∞–≥–∞—Ç—å–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    
    # –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    HEADLESS = False  # –ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º—ñ
    TIMEOUT = 10  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π
    
    # –ó–∞—Ç—Ä–∏–º–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    MIN_DELAY = 1
    MAX_DELAY = 3
    HUMAN_DELAY_MIN = 0.1
    HUMAN_DELAY_MAX = 0.3
    
    # === –ù–û–í–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –î–õ–Ø –ë–ê–ì–ê–¢–¨–û–• –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ===
    
    # –ó–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (—Å–µ–∫—É–Ω–¥–∏)
    MIN_USER_DELAY = 30   # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
    MAX_USER_DELAY = 60   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
    
    # –õ—ñ–º–∏—Ç–∏ –±–µ–∑–ø–µ–∫–∏
    MAX_USERS_PER_SESSION = 50     # –ú–∞–∫—Å–∏–º—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –æ–¥–Ω—É —Å–µ—Å—ñ—é
    MAX_USERS_PER_DAY = 100        # –ú–∞–∫—Å–∏–º—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –¥–µ–Ω—å
    MAX_DAILY_ACTIONS = 500        # –ú–∞–∫—Å–∏–º—É–º –¥—ñ–π –∑–∞ –¥–µ–Ω—å
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
    BATCH_SIZE = 10               # –†–æ–∑–º—ñ—Ä –ø–∞–∫–µ—Ç—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏
    BATCH_DELAY = 300             # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–∞–∫–µ—Ç–∞–º–∏ (5 —Ö–≤–∏–ª–∏–Ω)
    
    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    MAX_LIKES_PER_SESSION = 50
    MAX_COMMENTS_PER_SESSION = 10
    MAX_FOLLOWS_PER_SESSION = 20
    DEFAULT_POSTS_COUNT = 2        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –ª–∞–π–∫—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    
    # –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
    BASE_DIR = Path(__file__).parent
    LOGS_DIR = BASE_DIR / "logs"
    SESSIONS_DIR = BASE_DIR / "sessions"
    TEMP_DIR = BASE_DIR / "temp"
    DATA_DIR = BASE_DIR / "data"
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
    for directory in [LOGS_DIR, SESSIONS_DIR, TEMP_DIR, DATA_DIR]:
        directory.mkdir(exist_ok=True)
    
    # User Agents –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
    USER_AGENTS = [
        "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1",
        "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1",
        "Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1",
        "Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36",
        "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Mobile Safari/537.36",
        "Mozilla/5.0 (Linux; Android 10; SM-N975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.210 Mobile Safari/537.36"
    ]
    
    # –ü—Ä–æ–∫—Å—ñ —Å–µ—Ä–≤–µ—Ä–∏
    PROXY_SERVERS = [
        # –î–æ–¥–∞–π—Ç–µ –≤–∞—à—ñ –ø—Ä–æ–∫—Å—ñ —Å–µ—Ä–≤–µ—Ä–∏ —Ç—É—Ç
        # –§–æ—Ä–º–∞—Ç: "ip:port:username:password"
        # –ü—Ä–∏–∫–ª–∞–¥: "192.168.1.1:8080:user:pass"
    ]
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–ø—á—ñ
    CAPTCHA_SOLVER = {
        "service": "2captcha",  # 2captcha, anticaptcha, deathbycaptcha
        "api_key": "",  # –í–∞—à API –∫–ª—é—á
        "timeout": 120
    }
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ö–æ–¥—É –¥–µ—Ç–µ–∫—Ü—ñ—ó
    ANTI_DETECTION = {
        "mouse_movements": True,
        "random_scrolling": True,
        "typing_delays": True,
        "human_pauses": True,
        "viewport_changes": True
    }
    
    # === –°–ï–õ–ï–ö–¢–û–†–ò –î–õ–Ø INSTAGRAM (–û–ù–û–í–õ–ï–ù–Ü –î–õ–Ø 2025) ===
    SELECTORS = {
        "login": {
            "username": [
                "input[name='username']",
                "input[aria-label*='username']",
                "input[placeholder*='username']",
                "input[autocomplete='username']"
            ],
            "password": [
                "input[name='password']",
                "input[type='password']",
                "input[aria-label*='password']",
                "input[autocomplete='current-password']"
            ],
            "submit": [
                "button[type='submit']",
                "//button[contains(text(), 'Log in')]",
                "//button[contains(text(), 'Log In')]",
                "//button[contains(text(), '–£–≤—ñ–π—Ç–∏')]",
                "//div[@role='button' and contains(text(), 'Log')]",
                "//button[contains(@class, 'login') or contains(@class, 'Login')]"
            ]
        },
        "posts": {
            "container": [
                "article div div div div a",
                "div[role='button'] img[src*='instagram']",
                "article a[href*='/p/']",
                "div[style*='padding-bottom'] a"
            ],
            "like_button": [
                "svg[aria-label='Like']",
                "svg[aria-label='–ü–æ–¥–æ–±–∞—î—Ç—å—Å—è']",
                "button svg[aria-label*='Like']",
                "div[role='button'] svg[aria-label*='Like']"
            ],
            "unlike_button": [
                "svg[aria-label='Unlike']",
                "svg[aria-label='–ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è']",
                "button svg[aria-label*='Unlike']"
            ],
            "comment_button": [
                "svg[aria-label='Comment']",
                "svg[aria-label='–ö–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏']",
                "button svg[aria-label*='Comment']"
            ],
            "share_button": [
                "svg[aria-label='Share']",
                "svg[aria-label='–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è']",
                "button svg[aria-label*='Share']"
            ]
        },
        "stories": {
            "container": [
                "div[role='menu']",
                "div[style*='scroll'] div[role='button']",
                "section div[role='button']"
            ],
            "story_item": [
                "div[role='menu'] div div div",
                "div[style*='border-radius'] img",
                "canvas[style*='border-radius']"
            ],
            "username": [
                "span",
                "div span",
                "button span"
            ],
            "like_button": [
                "svg[aria-label='Like']",
                "svg[aria-label='–ü–æ–¥–æ–±–∞—î—Ç—å—Å—è']",
                "button[aria-label*='Like']"
            ],
            "reply_input": [
                "textarea[placeholder*='Send message']",
                "textarea[placeholder*='Reply']",
                "textarea[placeholder*='–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏']",
                "div[contenteditable='true']"
            ],
            "send_button": [
                "button[type='submit']",
                "//button[contains(text(), 'Send')]",
                "//div[@role='button' and contains(text(), 'Send')]"
            ]
        },
        "profile": {
            "followers": [
                "a[href*='/followers/'] span",
                "//a[contains(@href, 'followers')]//span"
            ],
            "following": [
                "a[href*='/following/'] span",
                "//a[contains(@href, 'following')]//span"
            ],
            "posts_count": [
                "span",
                "div span:first-child"
            ]
        },
        "dialogs": {
            "not_now": [
                "//button[contains(text(), 'Not Now')]",
                "//button[contains(text(), '–ù–µ –∑–∞—Ä–∞–∑')]",
                "//div[@role='button' and contains(text(), 'Not Now')]"
            ],
            "save_info": [
                "//button[contains(text(), 'Save Info')]",
                "//button[contains(text(), '–ó–±–µ—Ä–µ–≥—Ç–∏')]"
            ],
            "turn_on_notifications": [
                "//button[contains(text(), 'Turn on Notifications')]",
                "//button[contains(text(), '–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è')]"
            ],
            "close": [
                "svg[aria-label='Close']",
                "svg[aria-label='–ó–∞–∫—Ä–∏—Ç–∏']",
                "button[aria-label='Close']",
                "//button[@aria-label='Close']"
            ]
        },
        "captcha": [
            "div[role='dialog'] img",
            ".captcha-image",
            "img[alt*='captcha']",
            "img[src*='captcha']",
            "img[src*='challenge']"
        ]
    }
    
    # === –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ó–ê –ó–ê–ú–û–í–ß–£–í–ê–ù–ù–Ø–ú ===
    DEFAULT_STORY_REPLIES = [
        "üòç",
        "üî•",
        "‚ù§Ô∏è",
        "–ö—Ä—É—Ç–æ!",
        "–ö–ª–∞—Å–Ω–æ!",
        "–°—É–ø–µ—Ä!",
        "–ì–∞—Ä–Ω–æ!",
        "–¢–æ–ø!",
        "Wow!",
        "Nice!",
        "Amazing!",
        "Perfect!",
        "Love it!",
        "Beautiful!",
        "–î—É–∂–µ —Ü—ñ–∫–∞–≤–æ!",
        "–¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç!",
        "–ö—Ä–∞—Å–∏–≤–æ!",
        "üíØ",
        "üôå",
        "üëè",
        "‚≠ê",
        "üí´",
        "‚ú®"
    ]
    
    # === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ë–ê–ì–ê–¢–¨–û–• –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ===
    MULTI_USER_CONFIG = {
        # –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –æ–±—Ä–æ–±–∫–∏
        "processing_strategy": "sequential",  # sequential, parallel, batch
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
        "batch_processing": {
            "enabled": True,
            "batch_size": 10,
            "batch_delay": 300,  # 5 —Ö–≤–∏–ª–∏–Ω –º—ñ–∂ –ø–∞–∫–µ—Ç–∞–º–∏
            "randomize_order": True
        },
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
        "progress_reporting": {
            "enabled": True,
            "detailed_logs": True,
            "save_statistics": True
        },
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
        "error_handling": {
            "max_retries": 2,
            "retry_delay": 60,  # 1 —Ö–≤–∏–ª–∏–Ω–∞ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏
            "skip_failed_users": True,
            "continue_on_errors": True
        },
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        "statistics": {
            "track_success_rate": True,
            "save_detailed_logs": True,
            "export_reports": True
        }
    }
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    DATABASE = {
        "type": "sqlite",
        "path": str(DATA_DIR / "instagram_bot_multi.db"),
        "backup_frequency": 24  # –≥–æ–¥–∏–Ω
    }
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ–π
    SAVE_SESSIONS = False  # –ù–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å–µ—Å—ñ—ó –¥–ª—è –±–µ–∑–ø–µ–∫–∏
    ALWAYS_FRESH_LOGIN = True  # –ó–∞–≤–∂–¥–∏ –≤—Ö–æ–¥–∏—Ç–∏ –∑–∞–Ω–æ–≤–æ
    CLOSE_ALL_DIALOGS = True  # –ó–∞–∫—Ä–∏–≤–∞—Ç–∏ –≤—Å—ñ –¥—ñ–∞–ª–æ–≥–∏ –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
    DEBUG_MODE = True  # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    SCREENSHOTS_ON_ERROR = True  # –°–∫—Ä—ñ–Ω—à–æ—Ç–∏ –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö
    SLOW_MODE = True  # –ü–æ–≤—ñ–ª—å–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
    
    # === –ë–ï–ó–ü–ï–ö–ê –¢–ê –õ–Ü–ú–ò–¢–ò ===
    SECURITY = {
        "max_actions_per_hour": 30,
        "max_actions_per_day": 200,
        "cooldown_after_limit": 3600,  # —Å–µ–∫—É–Ω–¥
        "randomize_actions": True,
        
        # –ù–æ–≤—ñ –ª—ñ–º–∏—Ç–∏ –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        "max_users_per_hour": 20,
        "max_users_per_session": 50,
        "user_processing_timeout": 600,  # 10 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        "session_timeout": 7200,  # 2 –≥–æ–¥–∏–Ω–∏ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É —Ä–æ–±–æ—Ç–∏
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        "check_account_limits": True,
        "enforce_daily_limits": True,
        "auto_stop_on_errors": True
    }
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    LOGGING = {
        "level": "INFO",
        "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        "file_rotation": True,
        "max_file_size": 10 * 1024 * 1024,  # 10MB
        "backup_count": 5,
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        "multi_user_format": "%(asctime)s - [USER: %(user)s] - %(levelname)s - %(message)s",
        "separate_user_logs": False,  # –û–∫—Ä–µ–º—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        "progress_logging": True
    }
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GUI
    GUI = {
        "theme": "dark",
        "window_size": "1400x900",
        "resizable": True,
        "auto_save": True,
        "language": "uk",  # —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞
        
        # –ù–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GUI
        "multi_user_features": {
            "show_progress_bar": True,
            "show_user_count": True,
            "auto_validate_users": True,
            "save_user_lists": True,
            "batch_processing_ui": True
        },
        
        "colors": {
            "success": "#4caf50",
            "warning": "#ff9800", 
            "error": "#f44336",
            "info": "#2196f3",
            "accent": "#9c27b0"
        }
    }
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ—ó –µ–º—É–ª—è—Ü—ñ—ó
    MOBILE_DEVICES = {
        "iPhone_12": {
            "width": 390,
            "height": 844,
            "pixel_ratio": 3.0,
            "user_agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1"
        },
        "iPhone_13": {
            "width": 390,
            "height": 844,
            "pixel_ratio": 3.0,
            "user_agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1"
        },
        "Samsung_Galaxy_S21": {
            "width": 384,
            "height": 854,
            "pixel_ratio": 2.75,
            "user_agent": "Mozilla/5.0 (Linux; Android 11; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36"
        },
        "Google_Pixel_5": {
            "width": 393,
            "height": 851,
            "pixel_ratio": 2.75,
            "user_agent": "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Mobile Safari/537.36"
        }
    }
    
    # === –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ===
    USER_VALIDATION = {
        "check_username_format": True,
        "min_username_length": 1,
        "max_username_length": 30,
        "allowed_characters": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789._",
        "remove_at_symbol": True,
        "remove_duplicates": True,
        "case_sensitive": False
    }
    
    # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ê –ó–í–Ü–¢–ù–Ü–°–¢–¨ ===
    REPORTING = {
        "generate_reports": True,
        "report_format": "json",  # json, csv, html
        "include_timestamps": True,
        "include_user_details": True,
        "include_action_details": True,
        "save_screenshots": False,  # –°–∫—Ä—ñ–Ω—à–æ—Ç–∏ —É—Å–ø—ñ—à–Ω–∏—Ö –¥—ñ–π
        "export_path": str(DATA_DIR / "reports")
    }
    
    @classmethod
    def load_config(cls, config_file=None):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É"""
        if config_file and os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    config_data = json.load(f)
                    
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
                for key, value in config_data.items():
                    if hasattr(cls, key):
                        setattr(cls, key, value)
                        
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
                
    @classmethod
    def save_config(cls, config_file=None):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤ —Ñ–∞–π–ª"""
        if not config_file:
            config_file = cls.DATA_DIR / "config.json"
            
        try:
            config_data = {
                "HEADLESS": cls.HEADLESS,
                "TIMEOUT": cls.TIMEOUT,
                "MIN_DELAY": cls.MIN_DELAY,
                "MAX_DELAY": cls.MAX_DELAY,
                "MIN_USER_DELAY": cls.MIN_USER_DELAY,
                "MAX_USER_DELAY": cls.MAX_USER_DELAY,
                "MAX_USERS_PER_SESSION": cls.MAX_USERS_PER_SESSION,
                "MAX_USERS_PER_DAY": cls.MAX_USERS_PER_DAY,
                "DEFAULT_POSTS_COUNT": cls.DEFAULT_POSTS_COUNT,
                "MAX_LIKES_PER_SESSION": cls.MAX_LIKES_PER_SESSION,
                "MAX_COMMENTS_PER_SESSION": cls.MAX_COMMENTS_PER_SESSION,
                "MAX_FOLLOWS_PER_SESSION": cls.MAX_FOLLOWS_PER_SESSION,
                "CAPTCHA_SOLVER": cls.CAPTCHA_SOLVER,
                "ANTI_DETECTION": cls.ANTI_DETECTION,
                "MULTI_USER_CONFIG": cls.MULTI_USER_CONFIG,
                "SECURITY": cls.SECURITY,
                "GUI": cls.GUI,
                "USER_VALIDATION": cls.USER_VALIDATION,
                "REPORTING": cls.REPORTING
            }
            
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            
    @classmethod
    def get_random_user_agent(cls):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ User Agent"""
        import random
        return random.choice(cls.USER_AGENTS)
        
    @classmethod
    def get_random_device(cls):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é"""
        import random
        device_name = random.choice(list(cls.MOBILE_DEVICES.keys()))
        return cls.MOBILE_DEVICES[device_name]
        
    @classmethod
    def get_proxy(cls):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ —Å–µ—Ä–≤–µ—Ä–∞"""
        import random
        if cls.PROXY_SERVERS:
            return random.choice(cls.PROXY_SERVERS)
        return None
        
    @classmethod
    def validate_username(cls, username):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —é–∑–µ—Ä–Ω–µ–π–º—É"""
        if not username:
            return False, "–ü–æ—Ä–æ–∂–Ω—ñ–π —é–∑–µ—Ä–Ω–µ–π–º"
            
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É @
        if cls.USER_VALIDATION["remove_at_symbol"]:
            username = username.lstrip('@')
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏
        if len(username) < cls.USER_VALIDATION["min_username_length"]:
            return False, f"–ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π (–º—ñ–Ω. {cls.USER_VALIDATION['min_username_length']})"
            
        if len(username) > cls.USER_VALIDATION["max_username_length"]:
            return False, f"–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å. {cls.USER_VALIDATION['max_username_length']})"
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        allowed = cls.USER_VALIDATION["allowed_characters"]
        for char in username:
            if char not in allowed:
                return False, f"–ù–µ–¥–æ–∑–≤–æ–ª–µ–Ω–∏–π —Å–∏–º–≤–æ–ª: {char}"
                
        return True, username
        
    @classmethod
    def parse_users_input(cls, users_input):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é"""
        if not users_input:
            return []
            
        # –†—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ–≤
        separators = [',', ';', '\n', '\t', ' ']
        users = [users_input]
        
        for sep in separators:
            if sep in users_input:
                users = users_input.split(sep)
                break
        
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
        validated_users = []
        errors = []
        
        for user in users:
            user = user.strip()
            if not user:
                continue
                
            is_valid, result = cls.validate_username(user)
            if is_valid:
                if not cls.USER_VALIDATION["case_sensitive"]:
                    result = result.lower()
                validated_users.append(result)
            else:
                errors.append(f"{user}: {result}")
        
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        if cls.USER_VALIDATION["remove_duplicates"]:
            validated_users = list(dict.fromkeys(validated_users))
            
        return validated_users, errors
        
    @classmethod
    def get_user_delay(cls):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
        import random
        return random.uniform(cls.MIN_USER_DELAY, cls.MAX_USER_DELAY)
        
    @classmethod
    def get_action_delay(cls, action_type="default"):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥—ñ—ó"""
        import random
        
        delays = {
            "like": (2, 5),
            "comment": (5, 10),
            "story_reply": (3, 8),
            "direct_message": (10, 15),
            "navigation": (2, 4),
            "default": (cls.MIN_DELAY, cls.MAX_DELAY)
        }
        
        min_delay, max_delay = delays.get(action_type, delays["default"])
        return random.uniform(min_delay, max_delay)
        
    @classmethod
    def get_batch_config(cls):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏"""
        return cls.MULTI_USER_CONFIG["batch_processing"]
        
    @classmethod
    def is_within_limits(cls, current_users, current_actions):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—ñ–≤ –±–µ–∑–ø–µ–∫–∏"""
        security = cls.SECURITY
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        if current_users > security["max_users_per_session"]:
            return False, f"–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Å–µ—Å—ñ—é ({security['max_users_per_session']})"
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥—ñ–π
        if current_actions > security["max_actions_per_day"]:
            return False, f"–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –¥—ñ–π –∑–∞ –¥–µ–Ω—å ({security['max_actions_per_day']})"
            
        return True, "OK"
        
    @classmethod
    def get_default_actions_config(cls):
        """–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥—ñ–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"""
        return {
            'like_posts': True,
            'like_stories': True,
            'reply_stories': True,
            'send_direct_message': True,  # Fallback
            'posts_count': cls.DEFAULT_POSTS_COUNT
        }
        
    @classmethod
    def get_report_config(cls):
        """–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ"""
        return cls.REPORTING
        
    @classmethod
    def create_user_log_format(cls, username):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        base_format = cls.LOGGING["format"]
        return base_format.replace("%(name)s", f"%(name)s-{username}")
        
    @classmethod
    def get_gui_colors(cls):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä–æ–≤–æ—ó —Å—Ö–µ–º–∏ GUI"""
        return cls.GUI.get("colors", {})
        
    @classmethod
    def export_user_statistics(cls, username, stats):
        """–ï–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            if not cls.REPORTING["generate_reports"]:
                return False
                
            export_path = Path(cls.REPORTING["export_path"])
            export_path.mkdir(exist_ok=True)
            
            filename = export_path / f"{username}_stats.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(stats, f, indent=2, ensure_ascii=False)
                
            return True
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {username}: {e}")
            return False
            
    @classmethod
    def load_saved_users_lists(cls):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            lists_file = cls.DATA_DIR / "saved_user_lists.json"
            if lists_file.exists():
                with open(lists_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception:
            return {}
            
    @classmethod
    def save_users_list(cls, list_name, users_list):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            lists_file = cls.DATA_DIR / "saved_user_lists.json"
            saved_lists = cls.load_saved_users_lists()
            
            saved_lists[list_name] = {
                "users": users_list,
                "created_at": cls._get_current_timestamp(),
                "count": len(users_list)
            }
            
            with open(lists_file, 'w', encoding='utf-8') as f:
                json.dump(saved_lists, f, indent=2, ensure_ascii=False)
                
            return True
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É: {e}")
            return False
            
    @classmethod
    def _get_current_timestamp(cls):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –º—ñ—Ç–∫–∏ —á–∞—Å—É"""
        from datetime import datetime
        return datetime.now().isoformat()
        
    @classmethod
    def get_version_info(cls):
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–µ—Ä—Å—ñ—é"""
        return {
            "version": "2.0.0",
            "name": "Instagram Bot Multi-User",
            "features": [
                "Multiple users support",
                "Batch processing",
                "Enhanced GUI",
                "Advanced validation",
                "Detailed reporting",
                "Improved security"
            ],
            "release_date": "2025-01-01"
        }
        
    @classmethod
    def print_config_summary(cls):
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—é–º–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        print("=" * 50)
        print("üìã –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø INSTAGRAM BOT 2.0")
        print("=" * 50)
        
        version_info = cls.get_version_info()
        print(f"üöÄ –í–µ—Ä—Å—ñ—è: {version_info['version']}")
        print(f"üìÖ –î–∞—Ç–∞ —Ä–µ–ª—ñ–∑—É: {version_info['release_date']}")
        
        print("\nüîß –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:")
        print(f"  ‚Ä¢ Headless —Ä–µ–∂–∏–º: {'‚úÖ' if cls.HEADLESS else '‚ùå'}")
        print(f"  ‚Ä¢ –¢–∞–π–º–∞—É—Ç: {cls.TIMEOUT} —Å–µ–∫")
        print(f"  ‚Ä¢ –ó–∞—Ç—Ä–∏–º–∫–∏: {cls.MIN_DELAY}-{cls.MAX_DELAY} —Å–µ–∫")
        
        print("\nüë• –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–≥–∞—Ç—å–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:")
        print(f"  ‚Ä¢ –ú–∞–∫—Å. –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ —Å–µ—Å—ñ—é: {cls.MAX_USERS_PER_SESSION}")
        print(f"  ‚Ä¢ –ú–∞–∫—Å. –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –¥–µ–Ω—å: {cls.MAX_USERS_PER_DAY}")
        print(f"  ‚Ä¢ –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏: {cls.MIN_USER_DELAY}-{cls.MAX_USER_DELAY} —Å–µ–∫")
        print(f"  ‚Ä¢ –†–æ–∑–º—ñ—Ä –ø–∞–∫–µ—Ç—É: {cls.MULTI_USER_CONFIG['batch_processing']['batch_size']}")
        
        print("\nüõ°Ô∏è –ë–µ–∑–ø–µ–∫–∞:")
        print(f"  ‚Ä¢ –ú–∞–∫—Å. –¥—ñ–π –∑–∞ –¥–µ–Ω—å: {cls.SECURITY['max_actions_per_day']}")
        print(f"  ‚Ä¢ –ú–∞–∫—Å. –¥—ñ–π –∑–∞ –≥–æ–¥–∏–Ω—É: {cls.SECURITY['max_actions_per_hour']}")
        print(f"  ‚Ä¢ –†–∞–Ω–¥–æ–º—ñ–∑–∞—Ü—ñ—è –¥—ñ–π: {'‚úÖ' if cls.SECURITY['randomize_actions'] else '‚ùå'}")
        
        print("\nüìä –ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å:")
        print(f"  ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—ñ–≤: {'‚úÖ' if cls.REPORTING['generate_reports'] else '‚ùå'}")
        print(f"  ‚Ä¢ –§–æ—Ä–º–∞—Ç –∑–≤—ñ—Ç—ñ–≤: {cls.REPORTING['report_format']}")
        print(f"  ‚Ä¢ –î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è: {'‚úÖ' if cls.REPORTING['include_user_details'] else '‚ùå'}")
        
        print("\nüí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º:")
        for i, msg in enumerate(cls.DEFAULT_STORY_REPLIES[:5], 1):
            print(f"  {i}. {msg}")
        print(f"  ... —Ç–∞ —â–µ {len(cls.DEFAULT_STORY_REPLIES) - 5} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
        
        print("=" * 50)

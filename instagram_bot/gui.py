import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import threading
import json
import os
from datetime import datetime
import logging
from PIL import Image, ImageTk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.dates as mdates
from instagram_bot import InstagramBot
from config import Config
from utils import DatabaseManager, MessageManager, SecurityManager

class ModernStyle:
    """–°—É—á–∞—Å–Ω–∏–π —Å—Ç–∏–ª—å –¥–ª—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
    
    # –¢–µ–º–Ω–∞ —Ç–µ–º–∞
    DARK_THEME = {
        'bg': '#1a1a1a',
        'fg': '#ffffff',
        'select_bg': '#3d3d3d',
        'select_fg': '#ffffff',
        'entry_bg': '#2d2d2d',
        'entry_fg': '#ffffff',
        'button_bg': '#4a4a4a',
        'button_fg': '#ffffff',
        'button_active': '#5a5a5a',
        'accent': '#00d4aa',
        'success': '#00ff88',
        'warning': '#ffaa00',
        'error': '#ff4444',
        'info': '#44aaff'
    }
    
    # –°–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞
    LIGHT_THEME = {
        'bg': '#ffffff',
        'fg': '#000000',
        'select_bg': '#0078d4',
        'select_fg': '#ffffff',
        'entry_bg': '#f0f0f0',
        'entry_fg': '#000000',
        'button_bg': '#e0e0e0',
        'button_fg': '#000000',
        'button_active': '#d0d0d0',
        'accent': '#0078d4',
        'success': '#00aa00',
        'warning': '#ff8800',
        'error': '#cc0000',
        'info': '#0066cc'
    }
    
    @classmethod
    def get_theme(cls, theme_name='dark'):
        return cls.DARK_THEME if theme_name == 'dark' else cls.LIGHT_THEME

class InstagramBotGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Instagram Bot - –ú–æ–±—ñ–ª—å–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è")
        self.root.geometry("1200x800")
        self.root.minsize(800, 600)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏
        self.theme = ModernStyle.get_theme(Config.GUI.get('theme', 'dark'))
        self.setup_style()
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä–∏
        self.db = DatabaseManager()
        self.message_manager = MessageManager()
        self.security_manager = SecurityManager()
        
        # –ó–º—ñ–Ω–Ω—ñ
        self.bots = {}
        self.running_bots = set()
        self.accounts = []
        self.current_account = None
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.create_widgets()
        self.load_accounts()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        self.setup_logging()
        
        # –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        if Config.GUI.get('auto_save', True):
            self.auto_save()
            
    def setup_style(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—é"""
        style = ttk.Style()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏
        style.theme_use('clam')
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–∏–ª—ñ–≤
        style.configure('TLabel', 
                       background=self.theme['bg'],
                       foreground=self.theme['fg'])
        
        style.configure('TFrame',
                       background=self.theme['bg'])
                       
        style.configure('TButton',
                       background=self.theme['button_bg'],
                       foreground=self.theme['button_fg'],
                       borderwidth=1,
                       focuscolor='none')
                       
        style.map('TButton',
                 background=[('active', self.theme['button_active']),
                           ('pressed', self.theme['accent'])])
                           
        style.configure('TEntry',
                       background=self.theme['entry_bg'],
                       foreground=self.theme['entry_fg'],
                       borderwidth=1,
                       insertcolor=self.theme['fg'])
                       
        style.configure('TCombobox',
                       background=self.theme['entry_bg'],
                       foreground=self.theme['entry_fg'],
                       borderwidth=1)
                       
        style.configure('Treeview',
                       background=self.theme['bg'],
                       foreground=self.theme['fg'],
                       fieldbackground=self.theme['entry_bg'])
                       
        style.configure('Treeview.Heading',
                       background=self.theme['button_bg'],
                       foreground=self.theme['button_fg'])
                       
        # –ö–∞—Å—Ç–æ–º–Ω—ñ —Å—Ç–∏–ª–∏
        style.configure('Accent.TButton',
                       background=self.theme['accent'],
                       foreground='white')
                       
        style.configure('Success.TButton',
                       background=self.theme['success'],
                       foreground='white')
                       
        style.configure('Warning.TButton',
                       background=self.theme['warning'],
                       foreground='white')
                       
        style.configure('Error.TButton',
                       background=self.theme['error'],
                       foreground='white')
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–µ–Ω–µ–≤–æ–≥–æ –≤—ñ–∫–Ω–∞
        self.root.configure(bg=self.theme['bg'])
        
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        self.create_menu()
        
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ü–∞–Ω–µ–ª—å –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        self.create_navigation(main_frame)
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
        self.create_accounts_tab()
        self.create_automation_tab()
        self.create_messages_tab()
        self.create_statistics_tab()
        self.create_settings_tab()
        self.create_logs_tab()
        
    def create_menu(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –§–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–Ü–º–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤", command=self.import_accounts)
        file_menu.add_command(label="–ï–∫—Å–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤", command=self.export_accounts)
        file_menu.add_separator()
        file_menu.add_command(label="–í–∏—Ö—ñ–¥", command=self.root.quit)
        
        # –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", menu=tools_menu)
        tools_menu.add_command(label="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–∫—Å—ñ", command=self.check_proxies)
        tools_menu.add_command(label="–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥—ñ–≤", command=self.clear_logs)
        tools_menu.add_command(label="–†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è", command=self.create_backup)
        
        # –î–æ–ø–æ–º–æ–≥–∞
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–î–æ–ø–æ–º–æ–≥–∞", menu=help_menu)
        help_menu.add_command(label="–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è", command=self.show_help)
        help_menu.add_command(label="–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", command=self.show_about)
        
    def create_navigation(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó"""
        nav_frame = ttk.Frame(parent)
        nav_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(nav_frame, text="ü§ñ Instagram Bot", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(side=tk.LEFT)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(nav_frame, text="–ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏", 
                                     foreground=self.theme['success'])
        self.status_label.pack(side=tk.RIGHT)
        
        # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        self.activity_var = tk.StringVar(value="‚óè")
        self.activity_label = ttk.Label(nav_frame, textvariable=self.activity_var,
                                       foreground=self.theme['success'],
                                       font=('Arial', 12))
        self.activity_label.pack(side=tk.RIGHT, padx=(0, 10))
        
    def create_accounts_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="üë• –ê–∫–∞—É–Ω—Ç–∏")
        
        # –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        toolbar_frame = ttk.Frame(tab_frame)
        toolbar_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Button(toolbar_frame, text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç",
                  command=self.add_account_dialog,
                  style='Accent.TButton').pack(side=tk.LEFT, padx=(0, 5))
                  
        ttk.Button(toolbar_frame, text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
                  command=self.edit_account_dialog).pack(side=tk.LEFT, padx=(0, 5))
                  
        ttk.Button(toolbar_frame, text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏",
                  command=self.delete_account,
                  style='Error.TButton').pack(side=tk.LEFT, padx=(0, 5))
                  
        ttk.Button(toolbar_frame, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏",
                  command=self.refresh_accounts).pack(side=tk.LEFT, padx=(0, 5))
                  
        # –ü–æ—à—É–∫
        search_frame = ttk.Frame(toolbar_frame)
        search_frame.pack(side=tk.RIGHT)
        
        ttk.Label(search_frame, text="üîç –ü–æ—à—É–∫:").pack(side=tk.LEFT, padx=(0, 5))
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.filter_accounts)
        search_entry = ttk.Entry(search_frame, textvariable=self.search_var, width=20)
        search_entry.pack(side=tk.LEFT)
        
        # –¢–∞–±–ª–∏—Ü—è –∞–∫–∞—É–Ω—Ç—ñ–≤
        table_frame = ttk.Frame(tab_frame)
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Treeview
        columns = ('username', 'status', 'proxy', 'last_activity', 'actions_today')
        self.accounts_tree = ttk.Treeview(table_frame, columns=columns, show='headings')
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫
        self.accounts_tree.heading('username', text='–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
        self.accounts_tree.heading('status', text='–°—Ç–∞—Ç—É—Å')
        self.accounts_tree.heading('proxy', text='–ü—Ä–æ–∫—Å—ñ')
        self.accounts_tree.heading('last_activity', text='–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å')
        self.accounts_tree.heading('actions_today', text='–î—ñ—ó —Å—å–æ–≥–æ–¥–Ω—ñ')
        
        self.accounts_tree.column('username', width=150)
        self.accounts_tree.column('status', width=100)
        self.accounts_tree.column('proxy', width=150)
        self.accounts_tree.column('last_activity', width=150)
        self.accounts_tree.column('actions_today', width=100)
        
        # –°–∫—Ä–æ–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(table_frame, orient=tk.VERTICAL, command=self.accounts_tree.yview)
        self.accounts_tree.configure(yscrollcommand=scrollbar.set)
        
        # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è
        self.accounts_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é
        self.create_context_menu()
        
    def create_automation_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è")
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(tab_frame)
        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        left_frame = ttk.LabelFrame(main_container, text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó", padding=10)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        # –í–∏–±—ñ—Ä –∞–∫–∞—É–Ω—Ç–∞
        ttk.Label(left_frame, text="–ê–∫–∞—É–Ω—Ç:").pack(anchor=tk.W)
        self.account_var = tk.StringVar()
        self.account_combo = ttk.Combobox(left_frame, textvariable=self.account_var, state='readonly')
        self.account_combo.pack(fill=tk.X, pady=(0, 10))
        
        # –¶—ñ–ª—å–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        ttk.Label(left_frame, text="–¶—ñ–ª—å–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:").pack(anchor=tk.W)
        self.target_var = tk.StringVar()
        target_entry = ttk.Entry(left_frame, textvariable=self.target_var)
        target_entry.pack(fill=tk.X, pady=(0, 10))
        
        # –î—ñ—ó
        actions_frame = ttk.LabelFrame(left_frame, text="–î—ñ—ó", padding=5)
        actions_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.like_posts_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(actions_frame, text="–õ–∞–π–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ—Å—Ç—ñ–≤", 
                       variable=self.like_posts_var).pack(anchor=tk.W)
                       
        self.like_stories_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(actions_frame, text="–õ–∞–π–∫ —Å—Ç–æ—Ä—ñ—Å", 
                       variable=self.like_stories_var).pack(anchor=tk.W)
                       
        self.reply_stories_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(actions_frame, text="–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å—Ç–æ—Ä—ñ—Å", 
                       variable=self.reply_stories_var).pack(anchor=tk.W)
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–π–∫—ñ–≤
        likes_frame = ttk.Frame(left_frame)
        likes_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(likes_frame, text="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–π–∫—ñ–≤ –ø–æ—Å—Ç—ñ–≤:").pack(anchor=tk.W)
        self.likes_count_var = tk.IntVar(value=2)
        likes_spin = ttk.Spinbox(likes_frame, from_=1, to=10, textvariable=self.likes_count_var, width=10)
        likes_spin.pack(anchor=tk.W)
        
        # –ó–∞—Ç—Ä–∏–º–∫–∏
        delay_frame = ttk.LabelFrame(left_frame, text="–ó–∞—Ç—Ä–∏–º–∫–∏ (—Å–µ–∫—É–Ω–¥–∏)", padding=5)
        delay_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(delay_frame, text="–ú—ñ–Ω. –∑–∞—Ç—Ä–∏–º–∫–∞:").pack(anchor=tk.W)
        self.min_delay_var = tk.IntVar(value=Config.MIN_DELAY)
        min_delay_spin = ttk.Spinbox(delay_frame, from_=1, to=60, textvariable=self.min_delay_var, width=10)
        min_delay_spin.pack(anchor=tk.W, pady=(0, 5))
        
        ttk.Label(delay_frame, text="–ú–∞–∫—Å. –∑–∞—Ç—Ä–∏–º–∫–∞:").pack(anchor=tk.W)
        self.max_delay_var = tk.IntVar(value=Config.MAX_DELAY)
        max_delay_spin = ttk.Spinbox(delay_frame, from_=1, to=120, textvariable=self.max_delay_var, width=10)
        max_delay_spin.pack(anchor=tk.W)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        control_frame = ttk.Frame(left_frame)
        control_frame.pack(fill=tk.X, pady=(10, 0))
        
        self.start_button = ttk.Button(control_frame, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏", 
                                      command=self.start_automation,
                                      style='Success.TButton')
        self.start_button.pack(side=tk.LEFT, padx=(0, 5))
        
        self.stop_button = ttk.Button(control_frame, text="‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏", 
                                     command=self.stop_automation,
                                     style='Error.TButton', state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT, padx=(0, 5))
        
        ttk.Button(control_frame, text="‚è∏Ô∏è –ü–∞—É–∑–∞", 
                  command=self.pause_automation).pack(side=tk.LEFT)
        
        # –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å - –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
        right_frame = ttk.LabelFrame(main_container, text="üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥", padding=10)
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))
        
        # –ü—Ä–æ–≥—Ä–µ—Å
        progress_frame = ttk.Frame(right_frame)
        progress_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(progress_frame, text="–ü—Ä–æ–≥—Ä–µ—Å:").pack(anchor=tk.W)
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var, 
                                           maximum=100, length=300)
        self.progress_bar.pack(fill=tk.X, pady=(5, 0))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ttk.LabelFrame(right_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", padding=5)
        stats_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.stats_text = tk.Text(stats_frame, height=8, width=40, 
                                 bg=self.theme['entry_bg'], fg=self.theme['entry_fg'])
        self.stats_text.pack(fill=tk.BOTH, expand=True)
        
        # –õ–æ–≥–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É
        logs_frame = ttk.LabelFrame(right_frame, text="–õ–æ–≥–∏", padding=5)
        logs_frame.pack(fill=tk.BOTH, expand=True)
        
        self.live_logs = scrolledtext.ScrolledText(logs_frame, height=10, width=40,
                                                  bg=self.theme['entry_bg'], fg=self.theme['entry_fg'])
        self.live_logs.pack(fill=tk.BOTH, expand=True)
        
    def create_messages_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        
        # –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        toolbar_frame = ttk.Frame(tab_frame)
        toolbar_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Button(toolbar_frame, text="‚ûï –î–æ–¥–∞—Ç–∏",
                  command=self.add_message_dialog,
                  style='Accent.TButton').pack(side=tk.LEFT, padx=(0, 5))
                  
        ttk.Button(toolbar_frame, text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
                  command=self.edit_message_dialog).pack(side=tk.LEFT, padx=(0, 5))
                  
        ttk.Button(toolbar_frame, text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏",
                  command=self.delete_message,
                  style='Error.TButton').pack(side=tk.LEFT, padx=(0, 5))
                  
        ttk.Button(toolbar_frame, text="üìÅ –Ü–º–ø–æ—Ä—Ç –∑ —Ñ–∞–π–ª—É",
                  command=self.import_messages).pack(side=tk.LEFT, padx=(0, 5))
                  
        ttk.Button(toolbar_frame, text="üíæ –ï–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª",
                  command=self.export_messages).pack(side=tk.LEFT)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(tab_frame)
        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        left_frame = ttk.LabelFrame(main_container, text="üìù –°–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", padding=10)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        # Listbox –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
        self.messages_listbox = tk.Listbox(left_frame, height=15, 
                                          bg=self.theme['entry_bg'], fg=self.theme['entry_fg'],
                                          selectbackground=self.theme['select_bg'],
                                          selectforeground=self.theme['select_fg'])
        self.messages_listbox.pack(fill=tk.BOTH, expand=True)
        self.messages_listbox.bind('<Double-Button-1>', self.edit_message_dialog)
        
        # –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å - –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
        right_frame = ttk.LabelFrame(main_container, text="üëÅÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥", padding=10)
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))
        
        # –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        self.message_preview = tk.Text(right_frame, height=5, width=30, wrap=tk.WORD,
                                      bg=self.theme['entry_bg'], fg=self.theme['entry_fg'])
        self.message_preview.pack(fill=tk.X, pady=(0, 10))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        stats_text = tk.Text(right_frame, height=10, width=30,
                            bg=self.theme['entry_bg'], fg=self.theme['entry_fg'])
        stats_text.pack(fill=tk.BOTH, expand=True)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.update_messages_list()
        
    def create_statistics_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –ü–∞–Ω–µ–ª—å —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        filter_frame = ttk.LabelFrame(tab_frame, text="üîç –§—ñ–ª—å—Ç—Ä–∏", padding=10)
        filter_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # –ü–µ—Ä—ñ–æ–¥
        period_frame = ttk.Frame(filter_frame)
        period_frame.pack(side=tk.LEFT, padx=(0, 20))
        
        ttk.Label(period_frame, text="–ü–µ—Ä—ñ–æ–¥:").pack(anchor=tk.W)
        self.period_var = tk.StringVar(value="7 –¥–Ω—ñ–≤")
        period_combo = ttk.Combobox(period_frame, textvariable=self.period_var,
                                   values=["1 –¥–µ–Ω—å", "7 –¥–Ω—ñ–≤", "30 –¥–Ω—ñ–≤", "–í–µ—Å—å —á–∞—Å"],
                                   state='readonly', width=15)
        period_combo.pack()
        period_combo.bind('<<ComboboxSelected>>', self.update_statistics)
        
        # –ê–∫–∞—É–Ω—Ç
        account_frame = ttk.Frame(filter_frame)
        account_frame.pack(side=tk.LEFT, padx=(0, 20))
        
        ttk.Label(account_frame, text="–ê–∫–∞—É–Ω—Ç:").pack(anchor=tk.W)
        self.stats_account_var = tk.StringVar(value="–í—Å—ñ")
        stats_account_combo = ttk.Combobox(account_frame, textvariable=self.stats_account_var,
                                          state='readonly', width=20)
        stats_account_combo.pack()
        stats_account_combo.bind('<<ComboboxSelected>>', self.update_statistics)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        ttk.Button(filter_frame, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", 
                  command=self.update_statistics,
                  style='Accent.TButton').pack(side=tk.LEFT, padx=(20, 0))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
        charts_frame = ttk.Frame(tab_frame)
        charts_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è matplotlib –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
        self.create_charts(charts_frame)
        
    def create_settings_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        
        # Notebook –¥–ª—è –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        settings_notebook = ttk.Notebook(tab_frame)
        settings_notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.create_general_settings(settings_notebook)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏
        self.create_security_settings(settings_notebook)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ
        self.create_proxy_settings(settings_notebook)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–ø—á—ñ
        self.create_captcha_settings(settings_notebook)
        
    def create_logs_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ª–æ–≥—ñ–≤"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="üìã –õ–æ–≥–∏")
        
        # –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        toolbar_frame = ttk.Frame(tab_frame)
        toolbar_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Button(toolbar_frame, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏",
                  command=self.refresh_logs,
                  style='Accent.TButton').pack(side=tk.LEFT, padx=(0, 5))
                  
        ttk.Button(toolbar_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏",
                  command=self.clear_logs,
                  style='Warning.TButton').pack(side=tk.LEFT, padx=(0, 5))
                  
        ttk.Button(toolbar_frame, text="üíæ –ï–∫—Å–ø–æ—Ä—Ç",
                  command=self.export_logs).pack(side=tk.LEFT, padx=(0, 5))
        
        # –§—ñ–ª—å—Ç—Ä–∏ –ª–æ–≥—ñ–≤
        filter_frame = ttk.Frame(toolbar_frame)
        filter_frame.pack(side=tk.RIGHT)
        
        ttk.Label(filter_frame, text="–†—ñ–≤–µ–Ω—å:").pack(side=tk.LEFT, padx=(0, 5))
        self.log_level_var = tk.StringVar(value="–í—Å—ñ")
        log_level_combo = ttk.Combobox(filter_frame, textvariable=self.log_level_var,
                                      values=["–í—Å—ñ", "INFO", "WARNING", "ERROR"],
                                      state='readonly', width=10)
        log_level_combo.pack(side=tk.LEFT, padx=(0, 10))
        log_level_combo.bind('<<ComboboxSelected>>', self.filter_logs)
        
        ttk.Label(filter_frame, text="–ü–æ—à—É–∫:").pack(side=tk.LEFT, padx=(0, 5))
        self.log_search_var = tk.StringVar()
        self.log_search_var.trace('w', self.filter_logs)
        search_entry = ttk.Entry(filter_frame, textvariable=self.log_search_var, width=20)
        search_entry.pack(side=tk.LEFT)
        
        # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥—ñ–≤
        logs_frame = ttk.Frame(tab_frame)
        logs_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        self.logs_text = scrolledtext.ScrolledText(logs_frame, 
                                                  bg=self.theme['entry_bg'], 
                                                  fg=self.theme['entry_fg'],
                                                  font=('Consolas', 10))
        self.logs_text.pack(fill=tk.BOTH, expand=True)
        
        # –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
        self.auto_refresh_logs()
        
    def create_general_settings(self, parent):
        """–ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        frame = ttk.Frame(parent)
        parent.add(frame, text="üîß –ó–∞–≥–∞–ª—å–Ω—ñ")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫—Ä–æ–ª–æ–≤–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        canvas = tk.Canvas(frame, bg=self.theme['bg'])
        scrollbar = ttk.Scrollbar(frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        ui_frame = ttk.LabelFrame(scrollable_frame, text="–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å", padding=10)
        ui_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # –¢–µ–º–∞
        theme_frame = ttk.Frame(ui_frame)
        theme_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(theme_frame, text="–¢–µ–º–∞:").pack(side=tk.LEFT)
        self.theme_var = tk.StringVar(value=Config.GUI.get('theme', 'dark'))
        theme_combo = ttk.Combobox(theme_frame, textvariable=self.theme_var,
                                  values=["dark", "light"], state='readonly', width=15)
        theme_combo.pack(side=tk.LEFT, padx=(10, 0))
        theme_combo.bind('<<ComboboxSelected>>', self.change_theme)
        
        # –ú–æ–≤–∞
        lang_frame = ttk.Frame(ui_frame)
        lang_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(lang_frame, text="–ú–æ–≤–∞:").pack(side=tk.LEFT)
        self.lang_var = tk.StringVar(value=Config.GUI.get('language', 'uk'))
        lang_combo = ttk.Combobox(lang_frame, textvariable=self.lang_var,
                                 values=["uk", "en", "ru"], state='readonly', width=15)
        lang_combo.pack(side=tk.LEFT, padx=(10, 0))
        
        # –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        self.auto_save_var = tk.BooleanVar(value=Config.GUI.get('auto_save', True))
        ttk.Checkbutton(ui_frame, text="–ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", 
                       variable=self.auto_save_var).pack(anchor=tk.W)
        
        # –ü–æ–≤–µ–¥—ñ–Ω–∫–∞ –±–æ—Ç–∞
        bot_frame = ttk.LabelFrame(scrollable_frame, text="–ü–æ–≤–µ–¥—ñ–Ω–∫–∞ –±–æ—Ç–∞", padding=10)
        bot_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Headless —Ä–µ–∂–∏–º
        self.headless_var = tk.BooleanVar(value=Config.HEADLESS)
        ttk.Checkbutton(bot_frame, text="Headless —Ä–µ–∂–∏–º (–±–µ–∑ –≤—ñ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞)", 
                       variable=self.headless_var).pack(anchor=tk.W, pady=(0, 5))
        
        # –¢–∞–π–º–∞—É—Ç
        timeout_frame = ttk.Frame(bot_frame)
        timeout_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(timeout_frame, text="–¢–∞–π–º–∞—É—Ç (—Å–µ–∫—É–Ω–¥–∏):").pack(side=tk.LEFT)
        self.timeout_var = tk.IntVar(value=Config.TIMEOUT)
        timeout_spin = ttk.Spinbox(timeout_frame, from_=5, to=60, textvariable=self.timeout_var, width=10)
        timeout_spin.pack(side=tk.LEFT, padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        save_frame = ttk.Frame(scrollable_frame)
        save_frame.pack(fill=tk.X, padx=10, pady=20)
        
        ttk.Button(save_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", 
                  command=self.save_settings,
                  style='Success.TButton').pack()
        
        # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è —Å–∫—Ä–æ–ª–æ–≤–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def add_account_dialog(self):
        """–î—ñ–∞–ª–æ–≥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç")
        dialog.geometry("400x300")
        dialog.resizable(False, False)
        dialog.configure(bg=self.theme['bg'])
        
        # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(dialog, padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        ttk.Label(main_frame, text="–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:").pack(anchor=tk.W, pady=(0, 5))
        username_var = tk.StringVar()
        username_entry = ttk.Entry(main_frame, textvariable=username_var, width=40)
        username_entry.pack(fill=tk.X, pady=(0, 10))
        username_entry.focus()
        
        # –ü–∞—Ä–æ–ª—å
        ttk.Label(main_frame, text="–ü–∞—Ä–æ–ª—å:").pack(anchor=tk.W, pady=(0, 5))
        password_var = tk.StringVar()
        password_entry = ttk.Entry(main_frame, textvariable=password_var, show='*', width=40)
        password_entry.pack(fill=tk.X, pady=(0, 10))
        
        # –ü—Ä–æ–∫—Å—ñ (–æ–ø—Ü—ñ–π–Ω–æ)
        ttk.Label(main_frame, text="–ü—Ä–æ–∫—Å—ñ (–æ–ø—Ü—ñ–π–Ω–æ):").pack(anchor=tk.W, pady=(0, 5))
        proxy_var = tk.StringVar()
        proxy_entry = ttk.Entry(main_frame, textvariable=proxy_var, width=40)
        proxy_entry.pack(fill=tk.X, pady=(0, 10))
        
        # –ü—ñ–¥–∫–∞–∑–∫–∞ –¥–ª—è –ø—Ä–æ–∫—Å—ñ
        hint_label = ttk.Label(main_frame, text="–§–æ—Ä–º–∞—Ç: ip:port:username:password", 
                              foreground=self.theme['info'])
        hint_label.pack(anchor=tk.W, pady=(0, 20))
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X)
        
        def save_account():
            if not username_var.get() or not password_var.get():
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è!")
                return
                
            if self.db.add_account(username_var.get(), password_var.get(), proxy_var.get() or None):
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ê–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
                dialog.destroy()
                self.load_accounts()
            else:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç!")
        
        ttk.Button(button_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏", command=save_account,
                  style='Success.TButton').pack(side=tk.RIGHT, padx=(5, 0))
        ttk.Button(button_frame, text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", 
                  command=dialog.destroy).pack(side=tk.RIGHT)
        
    def load_accounts(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        for item in self.accounts_tree.get_children():
            self.accounts_tree.delete(item)
            
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –ë–î
        accounts = self.db.get_all_accounts()
        self.accounts = accounts
        
        for account in accounts:
            username = account[1]
            status = account[4]
            proxy = account[3] or "–ù–µ–º–∞—î"
            last_activity = account[5] or "–ù—ñ–∫–æ–ª–∏"
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥—ñ–π –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            today_actions = self.db.get_today_actions(username)
            actions_count = sum(today_actions.values())
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —Ç–∞–±–ª–∏—Ü—é
            self.accounts_tree.insert('', tk.END, values=(
                username, status, proxy, last_activity, actions_count
            ))
            
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–±–æ–±–æ–∫—Å—ñ–≤
        usernames = [acc[1] for acc in accounts]
        self.account_combo['values'] = usernames
        
    def start_automation(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        if not self.account_var.get():
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç!")
            return
            
        if not self.target_var.get():
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–ª—å–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return
            
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç–∞
        account = self.db.get_account(self.account_var.get())
        if not account:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ê–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return
            
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        def run_bot():
            try:
                self.update_status("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó...")
                self.start_button.config(state=tk.DISABLED)
                self.stop_button.config(state=tk.NORMAL)
                
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
                bot = InstagramBot(account[1], account[2], account[3])
                self.bots[account[1]] = bot
                self.running_bots.add(account[1])
                
                # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                messages = self.message_manager.messages
                
                # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
                success = bot.run_automation(self.target_var.get(), messages)
                
                if success:
                    self.update_status("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
                    self.log_message(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –¥–ª—è {account[1]} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
                else:
                    self.update_status("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏!")
                    self.log_message(f"‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –¥–ª—è {account[1]} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")
                    
            except Exception as e:
                self.update_status(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
                self.log_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó: {str(e)}")
                
            finally:
                self.start_button.config(state=tk.NORMAL)
                self.stop_button.config(state=tk.DISABLED)
                self.running_bots.discard(account[1])
                
        # –ó–∞–ø—É—Å–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        thread = threading.Thread(target=run_bot)
        thread.daemon = True
        thread.start()
        
    def stop_automation(self):
        """–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        for username in list(self.running_bots):
            if username in self.bots:
                self.bots[username].close()
                del self.bots[username]
                
        self.running_bots.clear()
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        self.update_status("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑—É–ø–∏–Ω–µ–Ω–∞")
        
    def update_status(self, message):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É"""
        self.status_label.config(text=message)
        
    def log_message(self, message):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        
        self.live_logs.insert(tk.END, log_entry)
        self.live_logs.see(tk.END)
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤
        lines = self.live_logs.get(1.0, tk.END).split('\n')
        if len(lines) > 1000:
            self.live_logs.delete(1.0, f"{len(lines)-1000}.0")
            
    def update_messages_list(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        self.messages_listbox.delete(0, tk.END)
        for message in self.message_manager.messages:
            self.messages_listbox.insert(tk.END, message)
            
    def add_message_dialog(self):
        """–î—ñ–∞–ª–æ–≥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        message = tk.simpledialog.askstring("–î–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", 
                                           "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
        if message:
            self.message_manager.add_message(message)
            self.update_messages_list()
            
    def setup_logging(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è GUI"""
        class GUILogHandler(logging.Handler):
            def __init__(self, gui):
                super().__init__()
                self.gui = gui
                
            def emit(self, record):
                log_entry = self.format(record)
                self.gui.log_message(log_entry)
                
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞
        gui_handler = GUILogHandler(self)
        gui_handler.setLevel(logging.INFO)
        
        formatter = logging.Formatter('%(levelname)s: %(message)s')
        gui_handler.setFormatter(formatter)
        
        logging.getLogger().addHandler(gui_handler)
        
    def auto_save(self):
        """–ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        if self.auto_save_var.get():
            self.save_settings()
            
        # –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω
        self.root.after(300000, self.auto_save)
        
    def save_settings(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        try:
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            Config.HEADLESS = self.headless_var.get()
            Config.TIMEOUT = self.timeout_var.get()
            Config.GUI['theme'] = self.theme_var.get()
            Config.GUI['language'] = self.lang_var.get()
            Config.GUI['auto_save'] = self.auto_save_var.get()
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —Ñ–∞–π–ª
            Config.save_config()
            
            messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {e}")
            
    def create_context_menu(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        self.context_menu = tk.Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", command=self.edit_account_dialog)
        self.context_menu.add_command(label="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", command=self.delete_account)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", command=self.check_account_status)
        self.context_menu.add_command(label="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", command=self.show_account_stats)
        
        def show_context_menu(event):
            try:
                self.context_menu.tk_popup(event.x_root, event.y_root)
            finally:
                self.context_menu.grab_release()
                
        self.accounts_tree.bind("<Button-3>", show_context_menu)
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        self.root.mainloop()
        
    def on_closing(self):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        # –ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –±–æ—Ç—ñ–≤
        self.stop_automation()
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        if self.auto_save_var.get():
            self.save_settings()
            
        self.root.destroy()

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–æ–¥–∏ (—Å–∫–æ—Ä–æ—á–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –º—ñ—Å—Ü—è)
    def edit_account_dialog(self): pass
    def delete_account(self): pass
    def refresh_accounts(self): pass
    def filter_accounts(self, *args): pass
    def pause_automation(self): pass
    def edit_message_dialog(self): pass
    def delete_message(self): pass
    def import_messages(self): pass
    def export_messages(self): pass
    def create_charts(self, parent): pass
    def update_statistics(self, *args): pass
    def create_security_settings(self, parent): pass
    def create_proxy_settings(self, parent): pass
    def create_captcha_settings(self, parent): pass
    def refresh_logs(self): pass
    def clear_logs(self): pass
    def export_logs(self): pass
    def filter_logs(self, *args): pass
    def auto_refresh_logs(self): pass
    def change_theme(self, *args): pass
    def import_accounts(self): pass
    def export_accounts(self): pass
    def check_proxies(self): pass
    def create_backup(self): pass
    def show_help(self): pass
    def show_about(self): pass
    def check_account_status(self): pass
    def show_account_stats(self): pass

if __name__ == "__main__":
    app = InstagramBotGUI()
    app.run()
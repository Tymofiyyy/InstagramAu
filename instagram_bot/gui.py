import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
import threading
import json
import os
from datetime import datetime
import logging

class InstagramBotGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Instagram Bot - –ë–∞–≥–∞—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏")
        self.root.geometry("1400x900")
        self.root.minsize(1000, 700)
        
        # –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è
        self.setup_style()
        
        # –ó–º—ñ–Ω–Ω—ñ
        self.bots = {}
        self.running_bots = set()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.create_widgets()
        
    def setup_style(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—é"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –¢–µ–º–Ω—ñ –∫–æ–ª—å–æ—Ä–∏
        self.colors = {
            'bg': '#2b2b2b',
            'fg': '#ffffff',
            'accent': '#4a9eff',
            'success': '#4caf50',
            'warning': '#ff9800',
            'error': '#f44336'
        }
        
        self.root.configure(bg=self.colors['bg'])
        
    def create_widgets(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤"""
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(main_frame)
        title_frame.pack(fill=tk.X, pady=(0, 10))
        
        title_label = tk.Label(title_frame, text="ü§ñ Instagram Bot - –ë–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", 
                              font=('Arial', 16, 'bold'), bg=self.colors['bg'], fg=self.colors['fg'])
        title_label.pack()
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
        self.create_automation_tab()
        self.create_messages_tab()
        self.create_accounts_tab()
        self.create_logs_tab()
        
    def create_automation_tab(self):
        """–ì–æ–ª–æ–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è")
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é
        canvas = tk.Canvas(tab_frame, bg=self.colors['bg'])
        scrollbar = ttk.Scrollbar(tab_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # === –°–ï–ö–¶–Ü–Ø –ê–ö–ê–£–ù–¢–ê ===
        account_frame = ttk.LabelFrame(scrollable_frame, text="üë§ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞", padding=15)
        account_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # –õ–æ–≥—ñ–Ω
        login_frame = ttk.Frame(account_frame)
        login_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(login_frame, text="–õ–æ–≥—ñ–Ω Instagram:").pack(anchor=tk.W)
        self.username_var = tk.StringVar()
        username_entry = ttk.Entry(login_frame, textvariable=self.username_var, width=30, font=('Arial', 11))
        username_entry.pack(fill=tk.X, pady=(5, 0))
        
        # –ü–∞—Ä–æ–ª—å
        password_frame = ttk.Frame(account_frame)
        password_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(password_frame, text="–ü–∞—Ä–æ–ª—å:").pack(anchor=tk.W)
        self.password_var = tk.StringVar()
        password_entry = ttk.Entry(password_frame, textvariable=self.password_var, show='*', width=30, font=('Arial', 11))
        password_entry.pack(fill=tk.X, pady=(5, 0))
        
        # –ü—Ä–æ–∫—Å—ñ (–æ–ø—Ü—ñ–π–Ω–æ)
        proxy_frame = ttk.Frame(account_frame)
        proxy_frame.pack(fill=tk.X)
        
        ttk.Label(proxy_frame, text="–ü—Ä–æ–∫—Å—ñ (–æ–ø—Ü—ñ–π–Ω–æ):").pack(anchor=tk.W)
        self.proxy_var = tk.StringVar()
        proxy_entry = ttk.Entry(proxy_frame, textvariable=self.proxy_var, width=30, font=('Arial', 11))
        proxy_entry.pack(fill=tk.X, pady=(5, 0))
        
        hint_label = ttk.Label(proxy_frame, text="–§–æ—Ä–º–∞—Ç: ip:port:username:password", foreground='gray')
        hint_label.pack(anchor=tk.W, pady=(2, 0))
        
        # === –°–ï–ö–¶–Ü–Ø –¶–Ü–õ–¨–û–í–ò–• –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ===
        targets_frame = ttk.LabelFrame(scrollable_frame, text="üéØ –¶—ñ–ª—å–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", padding=15)
        targets_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
        instructions_frame = ttk.Frame(targets_frame)
        instructions_frame.pack(fill=tk.X, pady=(0, 10))
        
        instructions_text = """üìù –°–ø–æ—Å–æ–±–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:
‚Ä¢ –ß–µ—Ä–µ–∑ –∫–æ–º—É: user1, user2, user3
‚Ä¢ –ß–µ—Ä–µ–∑ –∫—Ä–∞–ø–∫—É –∑ –∫–æ–º–æ—é: user1; user2; user3  
‚Ä¢ –ö–æ–∂–µ–Ω –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
‚Ä¢ –ß–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª: user1 user2 user3
‚Ä¢ –ó —Å–∏–º–≤–æ–ª–æ–º @: @user1, @user2 (—Å–∏–º–≤–æ–ª @ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)"""
        
        instructions_label = tk.Label(instructions_frame, text=instructions_text, 
                                     justify=tk.LEFT, bg=self.colors['bg'], fg='lightgray',
                                     font=('Arial', 9))
        instructions_label.pack(anchor=tk.W)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        targets_input_frame = ttk.Frame(targets_frame)
        targets_input_frame.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        ttk.Label(targets_input_frame, text="–í–≤–µ–¥—ñ—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", font=('Arial', 11, 'bold')).pack(anchor=tk.W)
        
        self.targets_text = scrolledtext.ScrolledText(targets_input_frame, height=6, width=60, 
                                                     font=('Arial', 11),
                                                     bg='white', fg='black')
        self.targets_text.pack(fill=tk.BOTH, expand=True, pady=(5, 10))
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        targets_buttons_frame = ttk.Frame(targets_frame)
        targets_buttons_frame.pack(fill=tk.X)
        
        ttk.Button(targets_buttons_frame, text="üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Ñ–∞–π–ª—É", 
                  command=self.load_targets_from_file).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(targets_buttons_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ —Ñ–∞–π–ª", 
                  command=self.save_targets_to_file).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(targets_buttons_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç–∏", 
                  command=self.clear_targets).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(targets_buttons_frame, text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏", 
                  command=self.validate_targets).pack(side=tk.LEFT)
        
        # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.targets_count_var = tk.StringVar(value="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: 0")
        count_label = ttk.Label(targets_frame, textvariable=self.targets_count_var, font=('Arial', 10, 'bold'))
        count_label.pack(anchor=tk.W, pady=(5, 0))
        
        # –í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –≤ —Ç–µ–∫—Å—Ç—ñ
        self.targets_text.bind('<KeyRelease>', self.update_targets_count)
        self.targets_text.bind('<ButtonRelease>', self.update_targets_count)
        
        # === –°–ï–ö–¶–Ü–Ø –î–Ü–ô ===
        actions_frame = ttk.LabelFrame(scrollable_frame, text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥—ñ–π", padding=15)
        actions_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # –ß–µ–∫–±–æ–∫—Å–∏ –¥—ñ–π
        self.like_posts_var = tk.BooleanVar(value=True)
        self.like_stories_var = tk.BooleanVar(value=True)
        self.reply_stories_var = tk.BooleanVar(value=True)
        self.send_dm_var = tk.BooleanVar(value=True)
        
        ttk.Checkbutton(actions_frame, text="‚ù§Ô∏è –õ–∞–π–∫–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ—Å—Ç–∏", 
                       variable=self.like_posts_var, 
                       command=self.update_actions_summary).pack(anchor=tk.W, pady=2)
        ttk.Checkbutton(actions_frame, text="üëç –õ–∞–π–∫–∞—Ç–∏ —Å—Ç–æ—Ä—ñ—Å", 
                       variable=self.like_stories_var,
                       command=self.update_actions_summary).pack(anchor=tk.W, pady=2)
        ttk.Checkbutton(actions_frame, text="üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ—Å", 
                       variable=self.reply_stories_var,
                       command=self.update_actions_summary).pack(anchor=tk.W, pady=2)
        ttk.Checkbutton(actions_frame, text="üì© –í—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ Direct Message (—è–∫—â–æ –Ω–µ–º–∞—î —Å—Ç–æ—Ä—ñ—Å)", 
                       variable=self.send_dm_var,
                       command=self.update_actions_summary).pack(anchor=tk.W, pady=2)
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤
        posts_frame = ttk.Frame(actions_frame)
        posts_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Label(posts_frame, text="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –ª–∞–π–∫—É:").pack(side=tk.LEFT)
        self.posts_count_var = tk.IntVar(value=2)
        posts_spin = ttk.Spinbox(posts_frame, from_=1, to=5, textvariable=self.posts_count_var, width=5)
        posts_spin.pack(side=tk.LEFT, padx=(10, 0))
        
        # –†–µ–∑—é–º–µ –¥—ñ–π
        self.actions_summary_var = tk.StringVar()
        summary_label = ttk.Label(actions_frame, textvariable=self.actions_summary_var, 
                                 foreground=self.colors['accent'], font=('Arial', 10))
        summary_label.pack(anchor=tk.W, pady=(10, 0))
        self.update_actions_summary()
        
        # === –°–ï–ö–¶–Ü–Ø –£–ü–†–ê–í–õ–Ü–ù–ù–Ø ===
        control_frame = ttk.LabelFrame(scrollable_frame, text="üéÆ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è", padding=15)
        control_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        buttons_frame = ttk.Frame(control_frame)
        buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.start_button = tk.Button(buttons_frame, text="‚ñ∂Ô∏è –ó–ê–ü–£–°–¢–ò–¢–ò –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Æ", 
                                     command=self.start_automation,
                                     bg=self.colors['success'], fg='white',
                                     font=('Arial', 12, 'bold'), height=2)
        self.start_button.pack(side=tk.LEFT, padx=(0, 10), fill=tk.X, expand=True)
        
        self.stop_button = tk.Button(buttons_frame, text="‚èπÔ∏è –ó–£–ü–ò–ù–ò–¢–ò", 
                                    command=self.stop_automation,
                                    bg=self.colors['error'], fg='white',
                                    font=('Arial', 12, 'bold'), height=2, state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
        progress_frame = ttk.Frame(control_frame)
        progress_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Label(progress_frame, text="–ü—Ä–æ–≥—Ä–µ—Å:").pack(anchor=tk.W)
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var, 
                                           maximum=100, length=400, mode='determinate')
        self.progress_bar.pack(fill=tk.X, pady=(5, 0))
        
        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É")
        status_label = ttk.Label(progress_frame, textvariable=self.status_var, 
                                font=('Arial', 11, 'bold'))
        status_label.pack(anchor=tk.W, pady=(5, 0))
        
        # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è —Å–∫—Ä–æ–ª–æ–≤–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bind mousewheel to canvas
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)

    def create_messages_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(tab_frame)
        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # === –ü–ê–ù–ï–õ–¨ –Ü–ù–°–¢–†–£–ú–ï–ù–¢–Ü–í ===
        toolbar_frame = ttk.Frame(main_container)
        toolbar_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(toolbar_frame, text="‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                  command=self.add_message_dialog).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(toolbar_frame, text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
                  command=self.edit_message_dialog).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(toolbar_frame, text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏",
                  command=self.delete_message).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(toolbar_frame, text="üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Ñ–∞–π–ª—É",
                  command=self.load_messages_from_file).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(toolbar_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ —Ñ–∞–π–ª",
                  command=self.save_messages_to_file).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(toolbar_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ",
                  command=self.clear_all_messages).pack(side=tk.LEFT)
        
        # === –ö–û–ù–¢–ï–ô–ù–ï–† –î–õ–Ø –°–ü–ò–°–ö–£ –¢–ê –†–ï–î–ê–ö–¢–û–†–ê ===
        content_frame = ttk.Frame(main_container)
        content_frame.pack(fill=tk.BOTH, expand=True)
        
        # –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        left_frame = ttk.LabelFrame(content_frame, text="üìù –°–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", padding=10)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        # Listbox –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
        self.messages_listbox = tk.Listbox(left_frame, height=20, 
                                          bg='white', fg='black',
                                          selectbackground=self.colors['accent'],
                                          selectforeground='white',
                                          font=('Arial', 10))
        self.messages_listbox.pack(fill=tk.BOTH, expand=True)
        self.messages_listbox.bind('<<ListboxSelect>>', self.on_message_select)
        self.messages_listbox.bind('<Double-Button-1>', self.edit_message_dialog)
        
        # –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å - —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        right_frame = ttk.LabelFrame(content_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", padding=10)
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))
        
        # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        instructions_frame = ttk.Frame(right_frame)
        instructions_frame.pack(fill=tk.X, pady=(0, 10))
        
        instructions_text = """üìù –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:
‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
‚Ä¢ –ó–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–ª—è –≤—ñ–¥—Å—Ç—É–ø—É
‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ—á–Ω–æ —è–∫ –≤–≤–µ–¥–µ–Ω–æ
‚Ä¢ –ü—Ä–∏–∫–ª–∞–¥ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∏–∂—á–µ üëá"""
        
        instructions_label = tk.Label(instructions_frame, text=instructions_text, 
                                     justify=tk.LEFT, bg=self.colors['bg'], fg='gray',
                                     font=('Arial', 9))
        instructions_label.pack(anchor=tk.W)
        
        # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        editor_frame = ttk.Frame(right_frame)
        editor_frame.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        ttk.Label(editor_frame, text="–í–≤–µ–¥—ñ—Ç—å –∞–±–æ —Ä–µ–¥–∞–≥—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", font=('Arial', 11, 'bold')).pack(anchor=tk.W)
        
        self.message_editor = scrolledtext.ScrolledText(editor_frame, height=15, width=40, wrap=tk.WORD,
                                                       bg='white', fg='black',
                                                       font=('Arial', 11))
        self.message_editor.pack(fill=tk.BOTH, expand=True, pady=(5, 10))
        
        # –ü—Ä–∏–∫–ª–∞–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        example_message = """–î–æ–±—Ä–æ–≥–æ –¥–Ω—è!  
–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –ê–Ω–¥—Ä—ñ–π, —è —Ä–µ–∫–ª–∞–º–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –ª—ñ—Ü–µ–Ω–∑–æ–≤–∞–Ω–∏—Ö –æ–Ω–ª–∞–π–Ω-–∫–∞–∑–∏–Ω–æ –£–∫—Ä–∞—ó–Ω–∏ üá∫üá¶

–ú–∏ —à—É–∫–∞—î–º–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ —ñ–∑ –∑–∞–ª—É—á–µ–Ω–æ—é –∞—É–¥–∏—Ç–æ—Ä—ñ—î—é.  
–ü—Ä–æ–ø–æ–Ω—É—î–º–æ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é –Ω–∞ –≤–∏–≥—ñ–¥–Ω–∏—Ö —É–º–æ–≤–∞—Ö:

‚Äî 50$ –∑–∞ –∫–æ–∂–Ω–æ–≥–æ –ª—ñ–¥–∞  
‚Äî CPA —Å–∏—Å—Ç–µ–º–∞  
‚Äî –ì–æ—Ç–æ–≤—ñ —Ä–µ–∫–ª–∞–º–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏  
‚Äî –©–æ—Ç–∏–∂–Ω–µ–≤—ñ –≤–∏–ø–ª–∞—Ç–∏

–ì–æ—Ç–æ–≤—ñ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑—Ä—É—á–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ –¥–ª—è –≤–∞—Å üë®üèª‚Äçüíª
‚Ä¢ –î–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π, –Ω–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ ¬´+¬ª  
@goldenhive_manager

–î—è–∫—É—é –∑–∞ —É–≤–∞–≥—É!"""
        
        self.message_editor.insert('1.0', example_message)
        
        # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        editor_buttons_frame = ttk.Frame(right_frame)
        editor_buttons_frame.pack(fill=tk.X)
        
        ttk.Button(editor_buttons_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", 
                  command=self.save_current_message).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(editor_buttons_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä", 
                  command=self.clear_editor).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(editor_buttons_frame, text="üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏", 
                  command=self.preview_message).pack(side=tk.LEFT)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.load_messages()
        
    def create_accounts_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="üë• –ê–∫–∞—É–Ω—Ç–∏")
        
        # –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        toolbar_frame = ttk.Frame(tab_frame)
        toolbar_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Button(toolbar_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∞–∫–∞—É–Ω—Ç",
                  command=self.save_current_account).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(toolbar_frame, text="üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç",
                  command=self.load_account).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(toolbar_frame, text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π",
                  command=self.delete_saved_account).pack(side=tk.LEFT)
        
        # –°–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
        accounts_frame = ttk.LabelFrame(tab_frame, text="–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏", padding=10)
        accounts_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        self.accounts_listbox = tk.Listbox(accounts_frame, height=10)
        self.accounts_listbox.pack(fill=tk.BOTH, expand=True)
        self.accounts_listbox.bind('<Double-Button-1>', self.load_selected_account)
        
        self.load_saved_accounts()
        
    def create_logs_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ª–æ–≥—ñ–≤"""
        tab_frame = ttk.Frame(self.notebook)
        self.notebook.add(tab_frame, text="üìã –õ–æ–≥–∏")
        
        # –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        toolbar_frame = ttk.Frame(tab_frame)
        toolbar_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Button(toolbar_frame, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏",
                  command=self.refresh_logs).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(toolbar_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏",
                  command=self.clear_logs).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(toolbar_frame, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏",
                  command=self.save_logs).pack(side=tk.LEFT, padx=(0, 5))
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        self.auto_scroll_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(toolbar_frame, text="üìú –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞", 
                       variable=self.auto_scroll_var).pack(side=tk.RIGHT)
        
        # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –ª–æ–≥—ñ–≤
        logs_frame = ttk.LabelFrame(tab_frame, text="–õ–æ–≥–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É", padding=10)
        logs_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        self.logs_text = scrolledtext.ScrolledText(logs_frame, 
                                                  font=('Consolas', 10),
                                                  bg='black', fg='lightgreen',
                                                  state=tk.DISABLED)
        self.logs_text.pack(fill=tk.BOTH, expand=True)

    # === –ú–ï–¢–û–î–ò –î–õ–Ø –†–û–ë–û–¢–ò –ó –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø–ú–ò ===
    
    def get_messages(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        messages = []
        for i in range(self.messages_listbox.size()):
            messages.append(self.messages_listbox.get(i))
        return messages
        
    def load_messages(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        try:
            try:
                with open('multiline_messages.json', 'r', encoding='utf-8') as f:
                    messages = json.load(f)
            except FileNotFoundError:
                messages = [
                    "–ü—Ä–∏–≤—ñ—Ç! üòä",
                    "–ö–ª–∞—Å–Ω–∏–π –ø–æ—Å—Ç! üëç",
                    "–î—è–∫—É—é –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç! üôè",
                    """–ü—Ä–∏–≤—ñ—Ç! üòä
–î—É–∂–µ —Å–ø–æ–¥–æ–±–∞–≤—Å—è —Ç–≤—ñ–π –ø–æ—Å—Ç!
–ü—Ä–æ–¥–æ–≤–∂—É–π —É —Ç–æ–º—É –∂ –¥—É—Å—ñ! üëç"""
                ]
                
            self.messages_listbox.delete(0, tk.END)
            for message in messages:
                # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—É –ª—ñ–Ω—ñ—é –≤ —Å–ø–∏—Å–∫—É –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
                display_text = message.split('\n')[0]
                if len(display_text) > 50:
                    display_text = display_text[:47] + "..."
                if '\n' in message:
                    display_text += " [–±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–µ]"
                    
                self.messages_listbox.insert(tk.END, display_text)
                
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            self.original_messages = messages
                
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            
    def save_messages(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        try:
            with open('multiline_messages.json', 'w', encoding='utf-8') as f:
                json.dump(self.original_messages, f, indent=2, ensure_ascii=False)
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            
    def on_message_select(self, event=None):
        """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É"""
        selection = self.messages_listbox.curselection()
        if selection and hasattr(self, 'original_messages'):
            index = selection[0]
            if index < len(self.original_messages):
                self.message_editor.delete('1.0', tk.END)
                self.message_editor.insert('1.0', self.original_messages[index])
                
    def save_current_message(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        message = self.message_editor.get('1.0', tk.END).strip()
        if not message:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
            return
            
        if not hasattr(self, 'original_messages'):
            self.original_messages = []
            
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        self.original_messages.append(message)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫
        display_text = message.split('\n')[0]
        if len(display_text) > 50:
            display_text = display_text[:47] + "..."
        if '\n' in message:
            display_text += " [–±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–µ]"
            
        self.messages_listbox.insert(tk.END, display_text)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
        self.save_messages()
        
        messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        
    def clear_editor(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        self.message_editor.delete('1.0', tk.END)
        
    def preview_message(self):
        """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        message = self.message_editor.get('1.0', tk.END).strip()
        if not message:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
            return
            
        # –ü–æ–∫–∞–∑—É—î–º–æ —è–∫ –±—É–¥–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        preview_window = tk.Toplevel(self.root)
        preview_window.title("–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        preview_window.geometry("500x400")
        preview_window.configure(bg='white')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(preview_window, text="–¢–∞–∫ –±—É–¥–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
                              font=('Arial', 12, 'bold'), bg='white')
        title_label.pack(pady=10)
        
        # –†–∞–º–∫–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message_frame = tk.Frame(preview_window, bg='#e1f5fe', relief='solid', bd=1)
        message_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message_label = tk.Label(message_frame, text=message, 
                                font=('Arial', 11), bg='#e1f5fe', fg='black',
                                justify=tk.LEFT, anchor='nw')
        message_label.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
        tk.Button(preview_window, text="–ó–∞–∫—Ä–∏—Ç–∏", command=preview_window.destroy,
                 bg=self.colors['accent'], fg='white', font=('Arial', 10)).pack(pady=10)

    def add_message_dialog(self):
        """–î—ñ–∞–ª–æ–≥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        self.clear_editor()
        messagebox.showinfo("–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", 
                           "–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ –ø—Ä–∞–≤–æ—Ä—É—á —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'")

    def edit_message_dialog(self, event=None):
        """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        selection = self.messages_listbox.curselection()
        if not selection:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è!")
            return
            
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–æ—Å—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä —á–µ—Ä–µ–∑ on_message_select
        messagebox.showinfo("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", 
                           "–í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'.\n–°—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–µ.")
        
        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —â–æ –º–∏ —Ä–µ–¥–∞–≥—É—î–º–æ
        self.editing_index = selection[0]

    def delete_message(self):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        selection = self.messages_listbox.curselection()
        if not selection:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!")
            return
            
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?"):
            index = selection[0]
            
            # –í–∏–¥–∞–ª—è—î–º–æ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
            if hasattr(self, 'original_messages') and index < len(self.original_messages):
                del self.original_messages[index]
                
            # –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å–ø–∏—Å–∫—É
            self.messages_listbox.delete(index)
            
            # –û—á–∏—â–∞—î–º–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä
            self.clear_editor()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
            self.save_messages()

    def clear_all_messages(self):
        """–û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?"):
            self.messages_listbox.delete(0, tk.END)
            self.original_messages = []
            self.clear_editor()
            self.save_messages()

    def load_messages_from_file(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Ñ–∞–π–ª—É"""
        filename = filedialog.askopenfilename(
            title="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
            filetypes=[("JSON files", "*.json"), ("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                if filename.endswith('.json'):
                    with open(filename, 'r', encoding='utf-8') as f:
                        messages = json.load(f)
                else:
                    with open(filename, 'r', encoding='utf-8') as f:
                        content = f.read()
                        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ –ø–æ–¥–≤—ñ–π–Ω–æ–º—É –ø–µ—Ä–µ–Ω–æ—Å—É —Ä—è–¥–∫–∞
                        messages = [msg.strip() for msg in content.split('\n\n') if msg.strip()]
                
                # –û—á–∏—â–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                self.messages_listbox.delete(0, tk.END)
                self.original_messages = []
                
                # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ
                for message in messages:
                    self.original_messages.append(message)
                    
                    display_text = message.split('\n')[0]
                    if len(display_text) > 50:
                        display_text = display_text[:47] + "..."
                    if '\n' in message:
                        display_text += " [–±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–µ]"
                        
                    self.messages_listbox.insert(tk.END, display_text)
                    
                self.save_messages()
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(messages)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å!")
                
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª: {e}")

    def save_messages_to_file(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —Ñ–∞–π–ª"""
        if not hasattr(self, 'original_messages') or not self.original_messages:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è!")
            return
            
        filename = filedialog.asksaveasfilename(
            title="–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                if filename.endswith('.json'):
                    with open(filename, 'w', encoding='utf-8') as f:
                        json.dump(self.original_messages, f, indent=2, ensure_ascii=False)
                else:
                    with open(filename, 'w', encoding='utf-8') as f:
                        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø–æ–¥–≤—ñ–π–Ω–∏–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º
                        f.write('\n\n'.join(self.original_messages))
                        
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(self.original_messages)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å!")
                
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª: {e}")

    # === –†–ï–®–¢–ê –ú–ï–¢–û–î–Ü–í (—Å–∫–æ—Ä–æ—á–µ–Ω—ñ –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –º—ñ—Å—Ü—è) ===
    
    def update_targets_count(self, event=None):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            content = self.targets_text.get('1.0', tk.END).strip()
            if not content:
                count = 0
            else:
                users = self.parse_targets(content)
                count = len(users)
            
            self.targets_count_var.set(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {count}")
        except Exception:
            self.targets_count_var.set("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ?")
            
    def parse_targets(self, content):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ü—ñ–ª—å–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        if not content:
            return []
        
        separators = [',', ';', '\n', ' ']
        users = [content]
        
        for sep in separators:
            if sep in content:
                users = content.split(sep)
                break
        
        cleaned_users = []
        for user in users:
            user = user.strip().replace('@', '')
            if user and len(user) > 0:
                import re
                if re.match("^[a-zA-Z0-9._]+$", user) and len(user) >= 1:
                    cleaned_users.append(user)
        
        return cleaned_users
        
    def update_actions_summary(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∑—é–º–µ –¥—ñ–π"""
        actions = []
        if self.like_posts_var.get():
            actions.append(f"‚ù§Ô∏è –õ–∞–π–∫ {self.posts_count_var.get()} –ø–æ—Å—Ç—ñ–≤")
        if self.like_stories_var.get():
            actions.append("üëç –õ–∞–π–∫ —Å—Ç–æ—Ä—ñ—Å")
        if self.reply_stories_var.get():
            actions.append("üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å—Ç–æ—Ä—ñ—Å")
        if self.send_dm_var.get():
            actions.append("üì© DM (fallback)")
            
        if actions:
            summary = "–î—ñ—ó: " + " ‚Üí ".join(actions)
        else:
            summary = "‚ö†Ô∏è –ù–µ –≤–∏–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ—ó –¥—ñ—ó!"
            
        self.actions_summary_var.set(summary)

    def validate_targets(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        content = self.targets_text.get('1.0', tk.END).strip()
        
        if not content:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–≤–µ–¥—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return
            
        users = self.parse_targets(content)
        
        if not users:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏—Ö —é–∑–µ—Ä–Ω–µ–π–º—ñ–≤!")
            return
            
        result_msg = f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(users)} –≤–∞–ª—ñ–¥–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n"
        result_msg += "\n".join([f"‚Ä¢ @{user}" for user in users[:10]])
        
        if len(users) > 10:
            result_msg += f"\n... —Ç–∞ —â–µ {len(users) - 10} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
            
        messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó", result_msg)

    def start_automation(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
        if not self.username_var.get() or not self.password_var.get():
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å!")
            return
            
        targets_content = self.targets_text.get('1.0', tk.END).strip()
        if not targets_content:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return
            
        users = self.parse_targets(targets_content)
        if not users:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!")
            return
            
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –∑ –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–∏–º–∏)
        if not hasattr(self, 'original_messages') or not self.original_messages:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
            return
            
        messages = self.original_messages
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø—É—Å–∫—É
        confirm_msg = f"""üöÄ –ì–æ—Ç–æ–≤—ñ –¥–æ –∑–∞–ø—É—Å–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó?

üë§ –ê–∫–∞—É–Ω—Ç: {self.username_var.get()}
üéØ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}
üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {len(messages)} (–≤–∫–ª—é—á–∞—é—á–∏ –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤—ñ)

–î—ñ—ó:
{self.actions_summary_var.get()}

‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å –º–æ–∂–µ —Ç—Ä–∏–≤–∞—Ç–∏ –¥–æ–≤–≥–æ. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?"""

        if not messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø—É—Å–∫—É", confirm_msg):
            return
            
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.status_var.set("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó...")
        self.progress_var.set(0)
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥—ñ–π
        actions_config = {
            'like_posts': self.like_posts_var.get(),
            'like_stories': self.like_stories_var.get(),
            'reply_stories': self.reply_stories_var.get(),
            'send_direct_message': self.send_dm_var.get(),
            'posts_count': self.posts_count_var.get()
        }
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        def run_automation():
            try:
                # –Ü–º–ø–æ—Ä—Ç –≤–∞—à–æ–≥–æ –±–æ—Ç–∞
                import sys
                import os
                sys.path.append(os.path.dirname(os.path.abspath(__file__)))
                
                from instagram_bot import InstagramBot
                
                bot = InstagramBot(
                    self.username_var.get(), 
                    self.password_var.get(), 
                    self.proxy_var.get() or None
                )
                
                self.bots[self.username_var.get()] = bot
                
                # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–æ GUI
                self.setup_bot_logging(bot)
                
                success = bot.run_automation_multiple_users(targets_content, messages, actions_config)
                
                if success:
                    self.log_message("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
                    self.status_var.set("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
                else:
                    self.log_message("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏!")
                    self.status_var.set("‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏!")
                    
                self.progress_var.set(100)
                
            except Exception as e:
                self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                self.status_var.set(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
                
            finally:
                self.start_button.config(state=tk.NORMAL)
                self.stop_button.config(state=tk.DISABLED)
                if self.username_var.get() in self.bots:
                    del self.bots[self.username_var.get()]
                    
        thread = threading.Thread(target=run_automation, daemon=True)
        thread.start()

    def setup_bot_logging(self, bot):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –¥–ª—è GUI"""
        class GUILogHandler(logging.Handler):
            def __init__(self, gui_instance):
                super().__init__()
                self.gui = gui_instance
                
            def emit(self, record):
                log_entry = self.format(record)
                self.gui.root.after(0, lambda: self.gui.log_message(log_entry))
                
        gui_handler = GUILogHandler(self)
        gui_handler.setLevel(logging.INFO)
        
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        gui_handler.setFormatter(formatter)
        
        bot.logger.addHandler(gui_handler)

    def stop_automation(self):
        """–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑—É–ø–∏–Ω–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é?"):
            for bot in self.bots.values():
                try:
                    bot.close()
                except:
                    pass
                    
            self.bots.clear()
            self.start_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.DISABLED)
            self.status_var.set("‚èπÔ∏è –ó—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            self.log_message("‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")

    def log_message(self, message):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –ª–æ–≥—ñ–≤"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_entry = f"[{timestamp}] {message}\n"
            
            self.logs_text.config(state=tk.NORMAL)
            self.logs_text.insert(tk.END, log_entry)
            
            if self.auto_scroll_var.get():
                self.logs_text.see(tk.END)
                
            self.logs_text.config(state=tk.DISABLED)
            
            lines = self.logs_text.get(1.0, tk.END).split('\n')
            if len(lines) > 1000:
                self.logs_text.config(state=tk.NORMAL)
                self.logs_text.delete(1.0, f"{len(lines)-1000}.0")
                self.logs_text.config(state=tk.DISABLED)
                
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è: {e}")

    # === –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –Ü–ù–®–ò–• –ú–ï–¢–û–î–Ü–í ===
    def load_targets_from_file(self): pass
    def save_targets_to_file(self): pass  
    def clear_targets(self): pass
    def save_current_account(self): pass
    def load_account(self): pass
    def delete_saved_account(self): pass
    def load_saved_accounts(self): pass
    def load_selected_account(self, event=None): pass
    def refresh_logs(self): pass
    def clear_logs(self): pass
    def save_logs(self): pass

    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        self.log_message("üöÄ Instagram Bot –∑ –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –∑–∞–ø—É—â–µ–Ω–æ")
        self.log_message("üìù –ú–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Ä—è–¥–∫—ñ–≤")
        self.log_message("üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è' –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
        self.root.mainloop()

    def on_closing(self):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        if self.bots:
            if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–Ñ –∞–∫—Ç–∏–≤–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è. –í—Å–µ –æ–¥–Ω–æ –∑–∞–∫—Ä–∏—Ç–∏?"):
                for bot in self.bots.values():
                    try:
                        bot.close()
                    except:
                        pass
                self.root.destroy()
        else:
            self.root.destroy()


if __name__ == "__main__":
    app = InstagramBotGUI()
    app.root.protocol("WM_DELETE_WINDOW", app.on_closing)
    app.run()
